// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/node_def.proto

package org.tensorflow.framework;

/**
 * Protobuf type {@code tensorflow.NodeDef}
 */
public final class NodeDef extends
                           com.google.protobuf.GeneratedMessageV3 implements
                                                                  // @@protoc_insertion_point(message_implements:tensorflow.NodeDef)
                                                                          NodeDefOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use NodeDef.newBuilder() to construct.
    private NodeDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private NodeDef() {
        name_ = "";
        op_ = "";
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        device_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
        return new NodeDef();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return this.unknownFields;
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return org.tensorflow.framework.NodeProto.internal_static_tensorflow_NodeDef_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
            int number) {
        switch (number) {
            case 5:
                return internalGetAttr();
            default:
                throw new RuntimeException(
                        "Invalid map field number: " + number);
        }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return org.tensorflow.framework.NodeProto.internal_static_tensorflow_NodeDef_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        org.tensorflow.framework.NodeDef.class, org.tensorflow.framework.NodeDef.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";

    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * The name given to this operator. Used for naming inputs,
     * logging, visualization, etc.  Unique within a single GraphDef.
     * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
    getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            name_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int OP_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object op_ = "";

    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     *
     * @return The op.
     */
    @java.lang.Override
    public java.lang.String getOp() {
        java.lang.Object ref = op_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            op_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * The operation name.  There may be custom parameters in attrs.
     * Op names starting with an underscore are reserved for internal use.
     * </pre>
     *
     * <code>string op = 2;</code>
     *
     * @return The bytes for op.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
    getOpBytes() {
        java.lang.Object ref = op_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            op_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int INPUT_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList input_;

    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     *
     * @return A list containing the input.
     */
    public com.google.protobuf.ProtocolStringList
    getInputList() {
        return input_;
    }

    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     *
     * @return The count of input.
     */
    public int getInputCount() {
        return input_.size();
    }

    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     *
     * @param index The index of the element to return.
     * @return The input at the given index.
     */
    public java.lang.String getInput(int index) {
        return input_.get(index);
    }

    /**
     * <pre>
     * Each input is "node:src_output" with "node" being a string name and
     * "src_output" indicating which output tensor to use from "node". If
     * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
     * may optionally be followed by control inputs that have the format
     * "^node".
     * </pre>
     *
     * <code>repeated string input = 3;</code>
     *
     * @param index The index of the value to return.
     * @return The bytes of the input at the given index.
     */
    public com.google.protobuf.ByteString
    getInputBytes(int index) {
        return input_.getByteString(index);
    }

    public static final int DEVICE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object device_ = "";

    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
     * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "&#64;other/node"                         (colocate with "other/node")
     * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
     * * "/job:worker/gpu:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     *
     * @return The device.
     */
    @java.lang.Override
    public java.lang.String getDevice() {
        java.lang.Object ref = device_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            device_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * A (possibly partial) specification for the device on which this
     * node should be placed.
     * The expected syntax for this string is as follows:
     * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
     * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
     * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
     * CONSTRAINT ::= ("job:" JOB_NAME)
     *              | ("replica:" [1-9][0-9]*)
     *              | ("task:" [1-9][0-9]*)
     *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
     * Valid values for this string include:
     * * "&#64;other/node"                         (colocate with "other/node")
     * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
     * * "/job:worker/gpu:3"                   (partial specification)
     * * ""                                    (no specification)
     * If the constraints do not resolve to a single device (or if this
     * field is empty or not present), the runtime will attempt to
     * choose a device automatically.
     * </pre>
     *
     * <code>string device = 4;</code>
     *
     * @return The bytes for device.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
    getDeviceBytes() {
        java.lang.Object ref = device_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            device_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int ATTR_FIELD_NUMBER = 5;

    private static final class AttrDefaultEntryHolder {
        static final com.google.protobuf.MapEntry<
                java.lang.String, org.tensorflow.framework.AttrValue> defaultEntry =
                com.google.protobuf.MapEntry
                        .<java.lang.String, org.tensorflow.framework.AttrValue>newDefaultInstance(
                                org.tensorflow.framework.NodeProto.internal_static_tensorflow_NodeDef_AttrEntry_descriptor,
                                com.google.protobuf.WireFormat.FieldType.STRING,
                                "",
                                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                                org.tensorflow.framework.AttrValue.getDefaultInstance());
    }

    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
            java.lang.String, org.tensorflow.framework.AttrValue> attr_;

    private com.google.protobuf.MapField<java.lang.String, org.tensorflow.framework.AttrValue>
    internalGetAttr() {
        if (attr_ == null) {
            return com.google.protobuf.MapField.emptyMapField(
                    AttrDefaultEntryHolder.defaultEntry);
        }
        return attr_;
    }

    public int getAttrCount() {
        return internalGetAttr().getMap().size();
    }

    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */
    @java.lang.Override
    public boolean containsAttr(
            java.lang.String key) {
        if (key == null) {
            throw new NullPointerException("map key");
        }
        return internalGetAttr().getMap().containsKey(key);
    }

    /**
     * Use {@link #getAttrMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> getAttr() {
        return getAttrMap();
    }

    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> getAttrMap() {
        return internalGetAttr().getMap();
    }

    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */
    @java.lang.Override
    public /* nullable */
    org.tensorflow.framework.AttrValue getAttrOrDefault(
            java.lang.String key,
            /* nullable */
            org.tensorflow.framework.AttrValue defaultValue) {
        if (key == null) {
            throw new NullPointerException("map key");
        }
        java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> map =
                internalGetAttr().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
    }

    /**
     * <pre>
     * Operation-specific graph-construction-time configuration.
     * Note that this should include all attrs defined in the
     * corresponding OpDef, including those with a value matching
     * the default -- this allows the default to change and makes
     * NodeDefs easier to interpret on their own.  However, if
     * an attr with a default is not specified in this list, the
     * default will be used.
     * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
     * one of the names from the corresponding OpDef's attr field).
     * The values must have a type matching the corresponding OpDef
     * attr's type field.
     * TODO(josh11b): Add some examples here showing best practices.
     * </pre>
     *
     * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
     */
    @java.lang.Override
    public org.tensorflow.framework.AttrValue getAttrOrThrow(
            java.lang.String key) {
        if (key == null) {
            throw new NullPointerException("map key");
        }
        java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> map =
                internalGetAttr().getMap();
        if (!map.containsKey(key)) {
            throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
    }

    private byte memoizedIsInitialized = -1;

    @java.lang.Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(op_)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, op_);
        }
        for (int i = 0; i < input_.size(); i++) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, input_.getRaw(i));
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(device_)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 4, device_);
        }
        com.google.protobuf.GeneratedMessageV3
                .serializeStringMapTo(
                        output,
                        internalGetAttr(),
                        AttrDefaultEntryHolder.defaultEntry,
                        5);
        getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(op_)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, op_);
        }
        {
            int dataSize = 0;
            for (int i = 0; i < input_.size(); i++) {
                dataSize += computeStringSizeNoTag(input_.getRaw(i));
            }
            size += dataSize;
            size += 1 * getInputList().size();
        }
        if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(device_)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, device_);
        }
        for (java.util.Map.Entry<java.lang.String, org.tensorflow.framework.AttrValue> entry
                : internalGetAttr().getMap().entrySet()) {
            com.google.protobuf.MapEntry<java.lang.String, org.tensorflow.framework.AttrValue>
                    attr__ = AttrDefaultEntryHolder.defaultEntry.newBuilderForType()
                                                                .setKey(entry.getKey())
                                                                .setValue(entry.getValue())
                                                                .build();
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(5, attr__);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.tensorflow.framework.NodeDef)) {
            return super.equals(obj);
        }
        org.tensorflow.framework.NodeDef other = (org.tensorflow.framework.NodeDef) obj;

        if (!getName()
                .equals(other.getName())) return false;
        if (!getOp()
                .equals(other.getOp())) return false;
        if (!getInputList()
                .equals(other.getInputList())) return false;
        if (!getDevice()
                .equals(other.getDevice())) return false;
        if (!internalGetAttr().equals(
                other.internalGetAttr())) return false;
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + OP_FIELD_NUMBER;
        hash = (53 * hash) + getOp().hashCode();
        if (getInputCount() > 0) {
            hash = (37 * hash) + INPUT_FIELD_NUMBER;
            hash = (53 * hash) + getInputList().hashCode();
        }
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
        if (!internalGetAttr().getMap().isEmpty()) {
            hash = (37 * hash) + ATTR_FIELD_NUMBER;
            hash = (53 * hash) + internalGetAttr().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.tensorflow.framework.NodeDef parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.tensorflow.framework.NodeDef parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static org.tensorflow.framework.NodeDef parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() {return newBuilder();}

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(org.tensorflow.framework.NodeDef prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @java.lang.Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * Protobuf type {@code tensorflow.NodeDef}
     */
    public static final class Builder extends
                                      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                                                                                              // @@protoc_insertion_point(builder_implements:tensorflow.NodeDef)
                                                                                                      org.tensorflow.framework.NodeDefOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tensorflow.framework.NodeProto.internal_static_tensorflow_NodeDef_descriptor;
        }

        @SuppressWarnings({"rawtypes"})
        protected com.google.protobuf.MapField internalGetMapField(
                int number) {
            switch (number) {
                case 5:
                    return internalGetAttr();
                default:
                    throw new RuntimeException(
                            "Invalid map field number: " + number);
            }
        }

        @SuppressWarnings({"rawtypes"})
        protected com.google.protobuf.MapField internalGetMutableMapField(
                int number) {
            switch (number) {
                case 5:
                    return internalGetMutableAttr();
                default:
                    throw new RuntimeException(
                            "Invalid map field number: " + number);
            }
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tensorflow.framework.NodeProto.internal_static_tensorflow_NodeDef_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tensorflow.framework.NodeDef.class, org.tensorflow.framework.NodeDef.Builder.class);
        }

        // Construct using org.tensorflow.framework.NodeDef.newBuilder()
        private Builder() {

        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

        }

        @java.lang.Override
        public Builder clear() {
            super.clear();
            bitField0_ = 0;
            name_ = "";
            op_ = "";
            input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
            bitField0_ = (bitField0_ & ~0x00000004);
            device_ = "";
            internalGetMutableAttr().clear();
            return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return org.tensorflow.framework.NodeProto.internal_static_tensorflow_NodeDef_descriptor;
        }

        @java.lang.Override
        public org.tensorflow.framework.NodeDef getDefaultInstanceForType() {
            return org.tensorflow.framework.NodeDef.getDefaultInstance();
        }

        @java.lang.Override
        public org.tensorflow.framework.NodeDef build() {
            org.tensorflow.framework.NodeDef result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @java.lang.Override
        public org.tensorflow.framework.NodeDef buildPartial() {
            org.tensorflow.framework.NodeDef result = new org.tensorflow.framework.NodeDef(this);
            buildPartialRepeatedFields(result);
            if (bitField0_ != 0) {
                buildPartial0(result);
            }
            onBuilt();
            return result;
        }

        private void buildPartialRepeatedFields(org.tensorflow.framework.NodeDef result) {
            if (((bitField0_ & 0x00000004) != 0)) {
                input_ = input_.getUnmodifiableView();
                bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.input_ = input_;
        }

        private void buildPartial0(org.tensorflow.framework.NodeDef result) {
            int from_bitField0_ = bitField0_;
            if (((from_bitField0_ & 0x00000001) != 0)) {
                result.name_ = name_;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
                result.op_ = op_;
            }
            if (((from_bitField0_ & 0x00000008) != 0)) {
                result.device_ = device_;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
                result.attr_ = internalGetAttr();
                result.attr_.makeImmutable();
            }
        }

        @java.lang.Override
        public Builder clone() {
            return super.clone();
        }

        @java.lang.Override
        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
            return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
            return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.tensorflow.framework.NodeDef) {
                return mergeFrom((org.tensorflow.framework.NodeDef) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(org.tensorflow.framework.NodeDef other) {
            if (other == org.tensorflow.framework.NodeDef.getDefaultInstance()) return this;
            if (!other.getName().isEmpty()) {
                name_ = other.name_;
                bitField0_ |= 0x00000001;
                onChanged();
            }
            if (!other.getOp().isEmpty()) {
                op_ = other.op_;
                bitField0_ |= 0x00000002;
                onChanged();
            }
            if (!other.input_.isEmpty()) {
                if (input_.isEmpty()) {
                    input_ = other.input_;
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    ensureInputIsMutable();
                    input_.addAll(other.input_);
                }
                onChanged();
            }
            if (!other.getDevice().isEmpty()) {
                device_ = other.device_;
                bitField0_ |= 0x00000008;
                onChanged();
            }
            internalGetMutableAttr().mergeFrom(
                    other.internalGetAttr());
            bitField0_ |= 0x00000010;
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
            return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            name_ = input.readStringRequireUtf8();
                            bitField0_ |= 0x00000001;
                            break;
                        } // case 10
                        case 18: {
                            op_ = input.readStringRequireUtf8();
                            bitField0_ |= 0x00000002;
                            break;
                        } // case 18
                        case 26: {
                            java.lang.String s = input.readStringRequireUtf8();
                            ensureInputIsMutable();
                            input_.add(s);
                            break;
                        } // case 26
                        case 34: {
                            device_ = input.readStringRequireUtf8();
                            bitField0_ |= 0x00000008;
                            break;
                        } // case 34
                        case 42: {
                            com.google.protobuf.MapEntry<java.lang.String, org.tensorflow.framework.AttrValue>
                                    attr__ = input.readMessage(
                                    AttrDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                            internalGetMutableAttr().getMutableMap().put(
                                    attr__.getKey(), attr__.getValue());
                            bitField0_ |= 0x00000010;
                            break;
                        } // case 42
                        default: {
                            if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                                done = true; // was an endgroup tag
                            }
                            break;
                        } // default:
                    } // switch (tag)
                } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.unwrapIOException();
            } finally {
                onChanged();
            } // finally
            return this;
        }

        private int bitField0_;

        private java.lang.Object name_ = "";

        /**
         * <pre>
         * The name given to this operator. Used for naming inputs,
         * logging, visualization, etc.  Unique within a single GraphDef.
         * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @return The name.
         */
        public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                name_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * The name given to this operator. Used for naming inputs,
         * logging, visualization, etc.  Unique within a single GraphDef.
         * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
        getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                name_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * The name given to this operator. Used for naming inputs,
         * logging, visualization, etc.  Unique within a single GraphDef.
         * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            name_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * The name given to this operator. Used for naming inputs,
         * logging, visualization, etc.  Unique within a single GraphDef.
         * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearName() {
            name_ = getDefaultInstance().getName();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * The name given to this operator. Used for naming inputs,
         * logging, visualization, etc.  Unique within a single GraphDef.
         * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);
            name_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
        }

        private java.lang.Object op_ = "";

        /**
         * <pre>
         * The operation name.  There may be custom parameters in attrs.
         * Op names starting with an underscore are reserved for internal use.
         * </pre>
         *
         * <code>string op = 2;</code>
         *
         * @return The op.
         */
        public java.lang.String getOp() {
            java.lang.Object ref = op_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                op_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * The operation name.  There may be custom parameters in attrs.
         * Op names starting with an underscore are reserved for internal use.
         * </pre>
         *
         * <code>string op = 2;</code>
         *
         * @return The bytes for op.
         */
        public com.google.protobuf.ByteString
        getOpBytes() {
            java.lang.Object ref = op_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                op_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * The operation name.  There may be custom parameters in attrs.
         * Op names starting with an underscore are reserved for internal use.
         * </pre>
         *
         * <code>string op = 2;</code>
         *
         * @param value The op to set.
         * @return This builder for chaining.
         */
        public Builder setOp(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            op_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * The operation name.  There may be custom parameters in attrs.
         * Op names starting with an underscore are reserved for internal use.
         * </pre>
         *
         * <code>string op = 2;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearOp() {
            op_ = getDefaultInstance().getOp();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * The operation name.  There may be custom parameters in attrs.
         * Op names starting with an underscore are reserved for internal use.
         * </pre>
         *
         * <code>string op = 2;</code>
         *
         * @param value The bytes for op to set.
         * @return This builder for chaining.
         */
        public Builder setOpBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);
            op_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
        }

        private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;

        private void ensureInputIsMutable() {
            if (!((bitField0_ & 0x00000004) != 0)) {
                input_ = new com.google.protobuf.LazyStringArrayList(input_);
                bitField0_ |= 0x00000004;
            }
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @return A list containing the input.
         */
        public com.google.protobuf.ProtocolStringList
        getInputList() {
            return input_.getUnmodifiableView();
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @return The count of input.
         */
        public int getInputCount() {
            return input_.size();
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @param index The index of the element to return.
         * @return The input at the given index.
         */
        public java.lang.String getInput(int index) {
            return input_.get(index);
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @param index The index of the value to return.
         * @return The bytes of the input at the given index.
         */
        public com.google.protobuf.ByteString
        getInputBytes(int index) {
            return input_.getByteString(index);
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @param index The index to set the value at.
         * @param value The input to set.
         * @return This builder for chaining.
         */
        public Builder setInput(
                int index, java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureInputIsMutable();
            input_.set(index, value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @param value The input to add.
         * @return This builder for chaining.
         */
        public Builder addInput(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureInputIsMutable();
            input_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @param values The input to add.
         * @return This builder for chaining.
         */
        public Builder addAllInput(
                java.lang.Iterable<java.lang.String> values) {
            ensureInputIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, input_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearInput() {
            input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * Each input is "node:src_output" with "node" being a string name and
         * "src_output" indicating which output tensor to use from "node". If
         * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
         * may optionally be followed by control inputs that have the format
         * "^node".
         * </pre>
         *
         * <code>repeated string input = 3;</code>
         *
         * @param value The bytes of the input to add.
         * @return This builder for chaining.
         */
        public Builder addInputBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);
            ensureInputIsMutable();
            input_.add(value);
            onChanged();
            return this;
        }

        private java.lang.Object device_ = "";

        /**
         * <pre>
         * A (possibly partial) specification for the device on which this
         * node should be placed.
         * The expected syntax for this string is as follows:
         * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
         * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
         * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
         * CONSTRAINT ::= ("job:" JOB_NAME)
         *              | ("replica:" [1-9][0-9]*)
         *              | ("task:" [1-9][0-9]*)
         *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
         * Valid values for this string include:
         * * "&#64;other/node"                         (colocate with "other/node")
         * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
         * * "/job:worker/gpu:3"                   (partial specification)
         * * ""                                    (no specification)
         * If the constraints do not resolve to a single device (or if this
         * field is empty or not present), the runtime will attempt to
         * choose a device automatically.
         * </pre>
         *
         * <code>string device = 4;</code>
         *
         * @return The device.
         */
        public java.lang.String getDevice() {
            java.lang.Object ref = device_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                device_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * A (possibly partial) specification for the device on which this
         * node should be placed.
         * The expected syntax for this string is as follows:
         * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
         * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
         * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
         * CONSTRAINT ::= ("job:" JOB_NAME)
         *              | ("replica:" [1-9][0-9]*)
         *              | ("task:" [1-9][0-9]*)
         *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
         * Valid values for this string include:
         * * "&#64;other/node"                         (colocate with "other/node")
         * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
         * * "/job:worker/gpu:3"                   (partial specification)
         * * ""                                    (no specification)
         * If the constraints do not resolve to a single device (or if this
         * field is empty or not present), the runtime will attempt to
         * choose a device automatically.
         * </pre>
         *
         * <code>string device = 4;</code>
         *
         * @return The bytes for device.
         */
        public com.google.protobuf.ByteString
        getDeviceBytes() {
            java.lang.Object ref = device_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                device_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * A (possibly partial) specification for the device on which this
         * node should be placed.
         * The expected syntax for this string is as follows:
         * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
         * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
         * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
         * CONSTRAINT ::= ("job:" JOB_NAME)
         *              | ("replica:" [1-9][0-9]*)
         *              | ("task:" [1-9][0-9]*)
         *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
         * Valid values for this string include:
         * * "&#64;other/node"                         (colocate with "other/node")
         * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
         * * "/job:worker/gpu:3"                   (partial specification)
         * * ""                                    (no specification)
         * If the constraints do not resolve to a single device (or if this
         * field is empty or not present), the runtime will attempt to
         * choose a device automatically.
         * </pre>
         *
         * <code>string device = 4;</code>
         *
         * @param value The device to set.
         * @return This builder for chaining.
         */
        public Builder setDevice(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            device_ = value;
            bitField0_ |= 0x00000008;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * A (possibly partial) specification for the device on which this
         * node should be placed.
         * The expected syntax for this string is as follows:
         * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
         * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
         * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
         * CONSTRAINT ::= ("job:" JOB_NAME)
         *              | ("replica:" [1-9][0-9]*)
         *              | ("task:" [1-9][0-9]*)
         *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
         * Valid values for this string include:
         * * "&#64;other/node"                         (colocate with "other/node")
         * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
         * * "/job:worker/gpu:3"                   (partial specification)
         * * ""                                    (no specification)
         * If the constraints do not resolve to a single device (or if this
         * field is empty or not present), the runtime will attempt to
         * choose a device automatically.
         * </pre>
         *
         * <code>string device = 4;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearDevice() {
            device_ = getDefaultInstance().getDevice();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * A (possibly partial) specification for the device on which this
         * node should be placed.
         * The expected syntax for this string is as follows:
         * DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
         * COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
         * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
         * CONSTRAINT ::= ("job:" JOB_NAME)
         *              | ("replica:" [1-9][0-9]*)
         *              | ("task:" [1-9][0-9]*)
         *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
         * Valid values for this string include:
         * * "&#64;other/node"                         (colocate with "other/node")
         * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
         * * "/job:worker/gpu:3"                   (partial specification)
         * * ""                                    (no specification)
         * If the constraints do not resolve to a single device (or if this
         * field is empty or not present), the runtime will attempt to
         * choose a device automatically.
         * </pre>
         *
         * <code>string device = 4;</code>
         *
         * @param value The bytes for device to set.
         * @return This builder for chaining.
         */
        public Builder setDeviceBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);
            device_ = value;
            bitField0_ |= 0x00000008;
            onChanged();
            return this;
        }

        private com.google.protobuf.MapField<
                java.lang.String, org.tensorflow.framework.AttrValue> attr_;

        private com.google.protobuf.MapField<java.lang.String, org.tensorflow.framework.AttrValue>
        internalGetAttr() {
            if (attr_ == null) {
                return com.google.protobuf.MapField.emptyMapField(
                        AttrDefaultEntryHolder.defaultEntry);
            }
            return attr_;
        }

        private com.google.protobuf.MapField<java.lang.String, org.tensorflow.framework.AttrValue>
        internalGetMutableAttr() {
            if (attr_ == null) {
                attr_ = com.google.protobuf.MapField.newMapField(
                        AttrDefaultEntryHolder.defaultEntry);
            }
            if (!attr_.isMutable()) {
                attr_ = attr_.copy();
            }
            bitField0_ |= 0x00000010;
            onChanged();
            return attr_;
        }

        public int getAttrCount() {
            return internalGetAttr().getMap().size();
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        @java.lang.Override
        public boolean containsAttr(
                java.lang.String key) {
            if (key == null) {
                throw new NullPointerException("map key");
            }
            return internalGetAttr().getMap().containsKey(key);
        }

        /**
         * Use {@link #getAttrMap()} instead.
         */
        @java.lang.Override
        @java.lang.Deprecated
        public java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> getAttr() {
            return getAttrMap();
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        @java.lang.Override
        public java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> getAttrMap() {
            return internalGetAttr().getMap();
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        @java.lang.Override
        public /* nullable */
        org.tensorflow.framework.AttrValue getAttrOrDefault(
                java.lang.String key,
                /* nullable */
                org.tensorflow.framework.AttrValue defaultValue) {
            if (key == null) {
                throw new NullPointerException("map key");
            }
            java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> map =
                    internalGetAttr().getMap();
            return map.containsKey(key) ? map.get(key) : defaultValue;
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        @java.lang.Override
        public org.tensorflow.framework.AttrValue getAttrOrThrow(
                java.lang.String key) {
            if (key == null) {
                throw new NullPointerException("map key");
            }
            java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> map =
                    internalGetAttr().getMap();
            if (!map.containsKey(key)) {
                throw new java.lang.IllegalArgumentException();
            }
            return map.get(key);
        }

        public Builder clearAttr() {
            bitField0_ = (bitField0_ & ~0x00000010);
            internalGetMutableAttr().getMutableMap()
                                    .clear();
            return this;
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        public Builder removeAttr(
                java.lang.String key) {
            if (key == null) {
                throw new NullPointerException("map key");
            }
            internalGetMutableAttr().getMutableMap()
                                    .remove(key);
            return this;
        }

        /**
         * Use alternate mutation accessors instead.
         */
        @java.lang.Deprecated
        public java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue>
        getMutableAttr() {
            bitField0_ |= 0x00000010;
            return internalGetMutableAttr().getMutableMap();
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        public Builder putAttr(
                java.lang.String key,
                org.tensorflow.framework.AttrValue value) {
            if (key == null) {
                throw new NullPointerException("map key");
            }
            if (value == null) {
                throw new NullPointerException("map value");
            }
            internalGetMutableAttr().getMutableMap()
                                    .put(key, value);
            bitField0_ |= 0x00000010;
            return this;
        }

        /**
         * <pre>
         * Operation-specific graph-construction-time configuration.
         * Note that this should include all attrs defined in the
         * corresponding OpDef, including those with a value matching
         * the default -- this allows the default to change and makes
         * NodeDefs easier to interpret on their own.  However, if
         * an attr with a default is not specified in this list, the
         * default will be used.
         * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
         * one of the names from the corresponding OpDef's attr field).
         * The values must have a type matching the corresponding OpDef
         * attr's type field.
         * TODO(josh11b): Add some examples here showing best practices.
         * </pre>
         *
         * <code>map&lt;string, .tensorflow.AttrValue&gt; attr = 5;</code>
         */
        public Builder putAllAttr(
                java.util.Map<java.lang.String, org.tensorflow.framework.AttrValue> values) {
            internalGetMutableAttr().getMutableMap()
                                    .putAll(values);
            bitField0_ |= 0x00000010;
            return this;
        }

        @java.lang.Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:tensorflow.NodeDef)
    }

    // @@protoc_insertion_point(class_scope:tensorflow.NodeDef)
    private static final org.tensorflow.framework.NodeDef DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new org.tensorflow.framework.NodeDef();
    }

    public static org.tensorflow.framework.NodeDef getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NodeDef>
            PARSER = new com.google.protobuf.AbstractParser<NodeDef>() {
        @java.lang.Override
        public NodeDef parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
                builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                        .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
        }
    };

    public static com.google.protobuf.Parser<NodeDef> parser() {
        return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NodeDef> getParserForType() {
        return PARSER;
    }

    @java.lang.Override
    public org.tensorflow.framework.NodeDef getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

